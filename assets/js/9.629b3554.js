(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{253:function(t,a,e){"use strict";e.r(a);var s=e(19),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"string-prototype-replace"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#string-prototype-replace"}},[t._v("#")]),t._v(" String.prototype.replace")]),t._v(" "),e("p",[t._v("相关概念参考"),e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace",target:"_blank",rel:"noopener noreferrer"}},[t._v("mdn:replace"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("这里主要讲述replace方法的第二个参数为函数，一般来说，replace方法在使用时第二个参数为字符串，但第二个参数为函数时能够给字符串的处理带来极大的方便")]),t._v(" "),e("h2",{attrs:{id:"示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),e("p",[t._v("将"),e("code",[t._v("-")]),t._v("拼接的变量变为驼峰命名的变量，如"),e("code",[t._v("hello-world")]),t._v("转化为"),e("code",[t._v("helloWorld")]),t._v(".")]),t._v(" "),e("p",[t._v("一种实现思路是找到所有的"),e("code",[t._v("-")]),t._v("对应的索引，然后将每个索引的后一位对应的字符大写，显然这种实现方式不够简洁，没有体现正则表达式以及replace方法的强大之处，那么如何使用replace方法实现\n驼峰转化呢。")]),t._v(" "),e("h2",{attrs:{id:"方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" re "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/-(\\w)/g")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("camelize")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("_"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" c "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("p",[t._v("这里"),e("code",[t._v("replace")]),t._v("方法的第二个参数为函数，借助于正则表达式"),e("code",[t._v("re")]),t._v("实现了camelize方法，从而将变量名驼峰化")]),t._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("p",[t._v("当使用函数作为第二个参数时，第一个参数一般都为正则，这要求对正则表达式有一定的熟悉，然后借助于replace方法能够对字符串进行操作，得到想要的字符串。")])])}),[],!1,null,null,null);a.default=r.exports}}]);