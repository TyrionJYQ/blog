(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{246:function(t,a,e){"use strict";e.r(a);var r=e(19),c=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("h2",{attrs:{id:"什么是cli"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是cli"}},[t._v("#")]),t._v(" 什么是CLI")]),t._v(" "),e("p",[t._v("CLI（command-line interface，命令行界面）是指可在用户提示符下键入可执行指令的界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。")]),t._v(" "),e("h2",{attrs:{id:"前端流行的cli"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端流行的cli"}},[t._v("#")]),t._v(" 前端流行的CLI")]),t._v(" "),e("ul",[e("li",[t._v("vue-cli")]),t._v(" "),e("li",[t._v("create-react-app")])]),t._v(" "),e("h2",{attrs:{id:"创建cli"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建cli"}},[t._v("#")]),t._v(" 创建CLI")]),t._v(" "),e("p",[t._v("既然已经有了"),e("strong",[t._v("vue-cli")]),t._v("和"),e("strong",[t._v("create-react-app")]),t._v("等cli工具，为什么还需要掌握如何创建一个新的cli的方法或者原理呢。\n"),e("strong",[t._v("vue-cli")]),t._v("和"),e("strong",[t._v("create-react-app")]),t._v("等cli工具实际上是针对技术栈而言。比如某个项目想使用vue作为前端框架，那么可以\n使用"),e("strong",[t._v("vue-cli")]),t._v("。但针对公司项目而言，有技术积累的公司可能会有公司内部的一套前端开发规范，比如公共的css，通用的工具库等。公司的项目都是基于一套样式和公共方法进行开发，或者有自己的npm包等。\n那么在没有特定的cli时，新开一个项目会从已有的项目进行复制链接，从而将新项目的框架搭建起来。但如果有了cli，可以直接使用命令行工具来帮助我们开启一个新的项目，并拉取项目模板。\n所以掌握cli原理是很有必要性的。")]),t._v(" "),e("p",[t._v("从个人角度而言，如果一个开发者经常写npm包，如果没有创建自己的cli工具，每次npm包项目的初始化就很麻烦，如果基于webpack或者rollup打包npm包，他需要写配置文件，然而对于开发一个npm包而言，模板是相同的，\n因此对于个人开发者来说，创建自己的cli工具也是很有必要性的。")])])}),[],!1,null,null,null);a.default=c.exports}}]);